@using TMA_Warehouse.Client.Services
@using TMA_Warehouse.Shared.DTOs
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TMA_Warehouse</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            @if (UserService.LoggedUser.Role != Role.Guest)
            {
                <NavLink class="nav-link" href="/Lists/Items">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> List of Goods
                </NavLink>
            }

        </div>
        <div class="nav-item px-3">
            @if (UserService.LoggedUser.Role == Role.Coordinator || UserService.LoggedUser.Role == Role.Adminitrator)
            {
                <NavLink class="nav-link" href="/Lists/Requests">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Purchase Requests
                </NavLink>
            }
        </div>
    </nav>
</div>

@code {
    [CascadingParameter] public MainLayout _Parent { get; set; }

    [Inject] public UserService UserService { get; set; }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override Task OnInitializedAsync()
    {
        _Parent.OnRefreshEvent += this.StateHasChanged;
        return base.OnInitializedAsync();
    }

}
