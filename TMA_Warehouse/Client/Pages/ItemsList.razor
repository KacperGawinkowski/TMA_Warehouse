@page "/fetchitems"
@using System.Reflection
@using TMA_Warehouse.Shared.DTOs

@inject HttpClient Http

<PageTitle>Items List</PageTitle>

<h1>Items List</h1>
<h1><button class="btn btn-primary" @onclick="@(() => AddItem())">Add Item</button></h1>


@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    <th @onclick="@(() => Sort(property))">
                        @property.Name
                        @if (currentSortProperty == property)
                        {
                            <i class="@(ascending ? "oi oi-arrow-top" : "oi oi-arrow-bottom")"></i>
                        }
                    </th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        <td>@property.GetValue(item)</td>
                    }

                    <td><button class="btn btn-primary" @onclick="@(() => UpdateItem(item))">Update</button></td>
                    <td><button class="btn btn-danger" @onclick="@(() => RemoveItem(item))">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    PropertyInfo[] properties = typeof(ItemDTO).GetProperties();
    private ItemDTO[]? items;

    PropertyInfo currentSortProperty;
    bool ascending = false;


    protected override async Task OnInitializedAsync()
    {
        items = await Http.GetFromJsonAsync<ItemDTO[]>("Lists/Items/GetItems");
    }

    private void Sort(PropertyInfo propertyInfo)
    {
        if(currentSortProperty == propertyInfo)
        {
            ascending = !ascending;
        }
        else
        {
            currentSortProperty = propertyInfo;
            ascending = false;
        }

        if (ascending)
        {
            items = items.OrderBy(item => currentSortProperty.GetValue(item)).ToArray();
        }
        else
        {
            items = items.OrderByDescending(item => currentSortProperty.GetValue(item)).ToArray();
        }
    }


    private void UpdateItem(ItemDTO item)
    {

    }

    private void RemoveItem(ItemDTO item)
    {

    }

    private void AddItem()
    {
        
    }
}
